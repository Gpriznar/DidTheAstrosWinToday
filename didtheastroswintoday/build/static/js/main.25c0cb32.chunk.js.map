{"version":3,"sources":["apiKey.js","components/TodaysGame.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","apiPW","TodaysGame","_Component","_this","Object","classCallCheck","this","today","Date","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","state","month","getUTCMonth","toString","padStart","axios","method","url","concat","getFullYear","getUTCDate","auth","username","password","then","response","games","data","setState","awayTeam","schedule","abbreviation","homeTeam","gameStart","startTime","awayScore","score","awayScoreTotal","homeScore","homeScoreTotal","inning","currentInning","topOrBottom","currentInningHalf","playedStatus","gameStatus","catch","error","console","log","venueId","inherits","createClass","key","value","body","date","isAM","getHours","react_default","a","createElement","getMinutes","dist_default","large","up","className","medium","only","small","down","Component","App","src_components_TodaysGame","Boolean","window","location","hostname","match","ReactDOM","render","dist","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25c0cb32.chunk.js","sourcesContent":["export const apiKey = 'fbd092c8-d4ac-4444-bfea-24b226'\nexport const apiPW = 'MYSPORTSFEEDS'\n","import React, {Component} from 'react'\nimport axios from 'axios'\nimport {apiKey} from '../apiKey'\nimport {apiPW} from '../apiKey'\nimport './TodaysGame.css';\nimport Breakpoint from 'react-socks'\n\n\nexport class TodaysGame extends Component {\n    constructor() {\n        let today = new Date()\n        super()\n\n        this.state = {\n            venueId: 120,\n            today: today,\n            gameStart: '',\n            homeTeam: '',\n            awayTeam: '',\n            inning: 0,\n            topOrBottom: '',\n            awayScore: 0,\n            homeScore: 0,\n            gameStatus: '',\n\n        }\n    }\n\n\n    componentDidMount = () => {\n      let today = this.state.today\n      let month = (today.getUTCMonth() + 1).toString().padStart(2, '0')\n        axios({\n            method: 'get',\n            url: `https://api.mysportsfeeds.com/v2.1/pull/mlb/current/date/${today.getFullYear()}${month}${today.getUTCDate()}/games.JSON?team=hou`,\n            auth: {\n                username: apiKey,\n                password: apiPW\n            }\n        }).then(response => {\n            const games = response.data.games[0]\n            this.setState({\n                awayTeam: games.schedule.awayTeam.abbreviation,\n                homeTeam: games.schedule.homeTeam.abbreviation,\n                gameStart: new Date(games.schedule.startTime),\n                awayScore: games.score.awayScoreTotal,\n                homeScore: games.score.homeScoreTotal,\n                inning: games.score.currentInning,\n                topOrBottom: games.score.currentInningHalf\n            })\n            if(games.schedule.playedStatus === \"UNPLAYED\") {\n                this.setState({\n                    gameStatus: 'pregame'\n                })\n            } else if(games.schedule.playedStatus === \"LIVE\") {\n                this.setState({\n                    gameStatus: 'live'\n                })\n            } else {\n                this.setState({\n                    gameStatus: 'final'\n                })\n            }\n        }).catch(error => {\n            console.log('Error on Authenication')\n            console.log(error)\n        })\n    }\n\n    render() {\n        let body = null\n\n        if(this.state.gameStatus === 'pregame') {\n          let date = this.state.gameStart\n          let isAM = true\n          if(date.getHours() > 11) {\n            isAM = false\n          }\n            body = (\n                <div>\n                <p> Game Starts at</p>\n                <p> {date.getHours().toString()}:{date.getMinutes().toString().padStart(2, '0')} {isAM ? 'AM':'PM'} (CDT)</p>\n                </div>\n            )\n        }\n        else if(this.state.gameStatus === 'live') {\n            body = (\n                <div>\n                <p>{this.state.awayTeam} - {this.state.awayScore}</p>\n                <p>{this.state.homeTeam} - {this.state.homeScore}</p>\n                <p>{this.state.topOrBottom} of the {this.state.inning}</p>\n                </div>\n            )\n        } else if(this.state.gameStatus === 'final') {\n            body = (\n                <div>\n                <p>Final Score</p>\n                <p>{this.state.awayTeam} - {this.state.awayScore}</p>\n                <p>{this.state.homeTeam} - {this.state.homeScore}</p>\n                </div>\n            )\n        }\n\n\n        return (\n          <div>\n          <Breakpoint large up>\n                   <div className='desktopText'> {body}</div>\n          </Breakpoint>\n\n          <Breakpoint medium only>\n                  <div className='tabletText'> {body}</div>\n          </Breakpoint>\n\n          <Breakpoint small down>\n                  <div className='mobileText'> {body}</div>\n          </Breakpoint>\n          </div>\n        )\n      }\n    }\n\nexport default TodaysGame\n","import React from 'react';\nimport TodaysGame from './components/TodaysGame'\nimport './App.css';\nimport Breakpoint from 'react-socks'\n\nfunction App() {\n  return (\n    <div className='mainpage'>\n    <Breakpoint large up>\n       <h1 className='desktopDTAWT'> Did the Astros Win Today? </h1>\n    </Breakpoint>\n    <Breakpoint medium only>\n       <h1 className='tabletDTAWT'> Did the Astros Win Today? </h1>\n    </Breakpoint>\n    <Breakpoint small down>\n       <h1 className='mobileDTAWT'> Did the Astros Win Today? </h1>\n    </Breakpoint>\n\n    <div className=\"bar-zero\"></div>\n    <div className=\"bar-one\"></div>\n    <div className=\"bar-two\"><TodaysGame /></div>\n    <div className=\"bar-three\"></div>\n    <div className=\"bar-four\"></div>\n    <div className=\"bar-five\"></div>\n    <div className=\"bar-six\"></div>\n    <div className=\"bar-seven\"></div>\n    <div className=\"bar-eight\"></div>\n    <div className=\"bar-nine\"></div>\n    <div className=\"bar-zero\"></div>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BreakpointProvider } from 'react-socks';\n\nReactDOM.render(\n<BreakpointProvider>\n  <App />\n</BreakpointProvider>,\n\n   document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}